// this variable is here to prevent functions from running again when ajax and colorbox fire.
var run_once = true;
var also_run_once = true;

(function ($, Drupal, window, document, undefined) {Drupal.behaviors.objective_search = {attach: function (context, settings) {

// get the parameters from the url
var params = $.deparam.querystring();

// these variables are used by chart_link_additions and refreshDropdown to set parameters on the chart page.
var ci_visible = false, se_visible = false;

// this is set by refreshDropdown and used by remember_display in order to set the population checkboxes at the top of the page
var pop_boxes = [];
if(params['pop'] != undefined) {
  pop_boxes = params['pop'].split('-');
}

// This is for keeping track of the 'customize display' checkboxes
var active_pop_filters = [];

var slide_click = function(expand_trigger, expand_div, toggle){
  expand_trigger.click(function(){
    $(this).toggleClass('expanded');
    expand_div.stop().slideToggle();
    if (toggle){
      $(this).find('.change').toggle();
    }
  });
}

// This adds functionality to the duplicate filters at the top of the page.
var objective_search_top = function(){
  // colorbox logic for help links.  This also applies to the links in the 'resource type' column
  $('#help_link, .help_link').colorbox({inline:true, width:"50%", onComplete:function(){
    if($(this).attr('data-target')) {
      window.location.hash = '';
      window.location.hash = $(this).attr('data-target');
    }
  }});

  // show and hide the right divs when the radio buttons are changed
  $('input[type=radio]').change(function(){
    $('div.top_filter').hide();
    $('#'+$(this).val()).show();
  });

  // set the slide_click function for each set of checkboxes
  slide_click($('#topic_filter .expand_button'), $('#topic_expand'), true);
  slide_click($('#data_filter .expand_button'), $('#data_expand'), true);
  slide_click($('#show_population_filters'), $('.population_filters'));
  $('h2.pane_expand_trigger').each(function(){
    slide_click($(this), $(this).siblings('.filter_contents'));
  });

  if(params['f'] != undefined) {
    if (typeof(params['f']) == 'array' || typeof(params['f']) == 'object') {
      $.each(params['f'], function(index, param) {
        var filter_value = param.split(':');
        if (filter_value[0] == 'field_topic_area' || filter_value[0] == 'field_data_sources' || filter_value[0] == 'field_ebr_topic_area') {
          $('.top_filter #'+filter_value[1]).attr('checked', 'checked');
        }
      });
    } else {
      var filter_value = params['f'].split(':');
      if (filter_value[0] == 'field_topic_area' || filter_value[0] == 'field_data_sources' || filter_value[0] == 'field_ebr_topic_area') {
        $('.top_filter #'+filter_value[1]).attr('checked', 'checked');
      }
    }
  }

  /**
  * Changes the text if there is already a selection made on this filter.
  * Apparently they don't want it to do this anymore, so it's removed for now.
  */
  // if ($('#topic_filter').find('input:checked').length) {
  //   $('#topic_filter .closed').text('Search more data by Topic Area');
  //   $('#topic_filter .closed').addClass('filtered');
  // }
  // if ($('#data_filter').find('input:checked').length) {
  //   $('#data_filter .closed').text('Search more data by Data Source');
  //   $('#data_filter .closed').addClass('filtered');
  // }

  // also disable checkboxes with no results in the top filter
  var facet_topics = {};
  var f_number = 0;
  if(params['f'] != undefined) {
    if (typeof(params['f']) == 'array' || typeof(params['f']) == 'object') {
      f_number = params['f'].length;
    } else {
      f_number = 1;
    }
  }
  $('.filter_contents ul.facetapi-facet-field-topic-area li.leaf a, .filter_contents ul.facetapi-facet-field-ebr-topic-area li.leaf a, .filter_contents ul.facetapi-facet-field-data-sources li.leaf a').each(function(){
    var facet_url = $(this).attr('href').split('?')[1];
    if (facet_url != undefined) {
      var facet_params = $.deparam(facet_url);
      if(facet_params['f'] != undefined) {
        var new_facet = facet_params['f'][f_number];
        if (new_facet != undefined) {
          var topic_id = new_facet.split(':')[1];
          facet_topics[topic_id] = $(this).closest('.leaf');
          if ($(this).hasClass('facetapi-zero-results')) {
            var top_input = $('input#'+topic_id);
            top_input.attr('disabled', 'true');
            top_input.siblings('label').addClass('disabled');
          }
        }
      }
    }
  });

  /**
  * This nonsense is to add links to the Topic Areas facet for topics areas which have no EBRs.
  * It is bad.
  * It should be removed if it isn't needed.
  */
  var good_facet = $('#facetapi-facet-search-apiebr-index-block-field-topic-area li.leaf').first();
  $("#topic_expand input[type='checkbox']").each(function(){
    var fake_facet_id = $(this).attr('id');
    if (facet_topics[fake_facet_id] == undefined && $(this).attr('checked') != 'checked') {
      $(this).attr('disabled', 'true');
      $(this).siblings('label').addClass('disabled');
      var topic_name = $(this).siblings('label').text();
      good_facet.after("<li class='leaf'>"+
        "<label class='element-invisible' for='fake-facetapi-link--" + fake_facet_id + "--checkbox'> Apply " + topic_name + " filter </label>"+
        "<input type='checkbox' class='facetapi-checkbox' id='fake-facetapi-link--" + fake_facet_id + "--checkbox' disabled='disabled'>"+
        "<a href='' rel='nofollow' class='facetapi-zero-results facetapi-inactive facetapi-checkbox-processed disabled' id='fake-facetapi-link--" + fake_facet_id + "'>"+
        topic_name + " (0)<span class='element-invisible'> Apply " + topic_name + " filter </span></a></li>");
      good_facet = $("#fake-facetapi-link--" + fake_facet_id).closest('.leaf');
    } else {
      if (facet_topics[$(this).attr('id')] != undefined) {
        good_facet = facet_topics[$(this).attr('id')];
      } else {
        good_facet = good_facet.next('li.leaf');
      }
    }
  });

  // set the query string when the top filter is 'submitted'
  $('a.filter_submit').click(function(){
    var nid_list = [];
    var filter_name = '';
    var filter_id = '';

    if ($(this).attr('id') === 'topic_filter_submit'){
      filter_id = '#topic_filter';
      if ($('body').hasClass('ebr-search')) {
        filter_name = 'field_ebr_topic_area';  
      } else {
        filter_name = 'field_topic_area';
      }
    } else if ($(this).attr('id') === 'data_filter_submit'){
      filter_id = '#data_filter';
      filter_name = 'field_data_sources';
    }
    $(filter_id+' input').each(function(){
      if($(this).is(':checked')){
        nid_list.push($(this).attr('id'));
      }
    });

    var base_url = window.location.href.split('?')[0];
    var new_params = {};
    new_params['f'] = [];
    if(ci_visible) {
      params['ci'] = 1;
    } else {
      params['ci'] = 0;
    }
    if(se_visible) {
      params['se'] = 1;
    } else {
      params['se'] = 0;
    }
    params['pop'] = pop_boxes.join('-');
    $.each(params, function(index, param) {
      if (index == 'f') {
        if (typeof(params['f']) == 'array' || typeof(params['f']) == 'object') {
          $.each(params['f'], function(f_index, f_param){
            filter_value = f_param.split(':');
            if(filter_value[0] != filter_name) {
              new_params['f'].push(f_param);
            }
          });
        } else {
          filter_value = f_param.split(':');
          if(filter_value[0] != filter_name) {
            new_params['f'].push(param);
          }
        }
      } else {
        new_params[index] = param;
      }
    });

    $.each(nid_list, function(index, nid){
      new_params['f'].push(filter_name+":"+nid);
    });
    window.location.assign($.param.querystring(base_url, new_params));
  });

  // make the 'download search results' link work
  var export_link = $('.feed-icon a').attr('href');
  $('a.export').attr('href', export_link);

  // 'All populations' checkbox
  $('input#show_all_pops').click(function(){
    var pop_checkboxes = $(".customize-display-dropdown .col-3 input[type='checkbox']:not([disabled])");
    if($(this).is(':checked')) {
      pop_checkboxes.attr('checked', 'checked');
    } else {
      pop_checkboxes.removeAttr('checked');
    }
  });

};

// add additional functionality to the filters on the left
var objective_search_side = function(){

  // modifies the number at the top of each filter based on how many checkboxes are checked within that filter.
  $('span.check_count').each(function(){
    var check_count = $(this).closest('.panel-pane').find('input:checked').length;
    if (check_count > 0){
      $(this).text(check_count);
      $(this).parent().click();
    }
  });

  // disable checkboxes which would result in an empty results set
  $('.filter_contents .item-list li.leaf a.facetapi-zero-results').each(function(){
    $(this).siblings('input').attr('disabled', 'true');
    $(this).addClass('disabled');
  });

  // hide the #results text from the odphp_terms filter
  $('#facetapi-facet-search-apinew-node-index-block-field-odphp-terms li.leaf a, #facetapi-facet-search-apiebr-index-block-field-odphp-terms li.leaf a').each(function() {
    orphan = $(this).children().detach();
    filter_text = $(this).text().split(' ');
    filter_text.pop();
    $(this).text(filter_text.join(' '));
    $(this).append(orphan);
  });

  // powers the 'search within topic area' boxes
  $('input.search_in_filter').keyup(function(){
    var search_text = $(this).val().toLowerCase();
    $(this).siblings('.pane-content').find('li.leaf label').each(function(){
      if ($(this).text().toLowerCase().split(' ').slice(2, -2).join(' ').indexOf(search_text) > -1) {
        $(this).parent().show();
      } else {
        $(this).parent().hide();
      }
    });
  });

  // logic for the 'clear selection(s) buttons'
  $("a.clear_facet").click(function(){
    var base_url = window.location.href.split('?')[0];
    var facet_id = $(this).closest('.panel-pane').attr('id');
    var new_params = {};
    new_params['f'] = [];
    if(ci_visible) {
      params['ci'] = 1;
    } else {
      params['ci'] = 0;
    }
    if(se_visible) {
      params['se'] = 1;
    } else {
      params['se'] = 0;
    }
    params['pop'] = pop_boxes.join('-');
    $.each(params, function(index, param){
      if(index == 'f') {
        if (typeof(params['f']) == 'array' || typeof(params['f']) == 'object') {
          $.each(params['f'], function(f_index, f_param){
            filter_value = f_param.split(':');
            if(filter_value[0] != facet_id) {
              new_params['f'].push(f_param);
            }
          });
        } else {
          filter_value = param.split(':');
          if(filter_value[0] != facet_id) {
            new_params['f'].push(f_param);
          }
        }
      } else {
        new_params[index] = param;
      }
    });
    window.location.assign($.param.querystring(base_url, new_params));
  });

  // special logic for the boolean filters at the bottom
  // check if the corresponding box is checked
  var real_checkbox = $('#facetapi-facet-search-apinew-node-index-block-field-is-developmental li.first .facetapi-checkbox');
  if(real_checkbox.is(':checked')) {
    $('#developmental_checkbox').attr('checked', 'checked');
  }
  // check if the corresponding box is disabled
  if (real_checkbox.is(':disabled')) {
    $('#developmental_checkbox').attr('disabled', 'disabled');
    $('#field_is_developmental .bool_title').addClass('disabled');
  } else {
    $('#developmental_checkbox').change(function(){
      real_checkbox.click();
    });
  }
};

var footnote_logic = function() {
  $('.hide_footnotes, .all_footnotes, .CI_footnote').hide();
  $('.data-table').on('click', '.show_footnotes, .hide_footnotes', function(){
    $(this).toggle();
    $(this).siblings('.show_footnotes, .hide_footnotes, .all_footnotes').toggle();
  });
};


/*!
 * Data table refresh dropdown code
 */
var refreshDropdown = {

  init: function() {
    this.dropdownButton = $('[data-hide-populations]');

    this.dropdown = $('div.customize-display-dropdown');

    this.checkboxes = this.dropdown.find('.col-3 input[type="checkbox"]').not(function() {
      return $(this).val() === 'Total';
    });

    this.dropdown.on('click', 'button[data-refresh-populations]', this.refreshClickEvent.bind(this));

    $(document).on('backboneRenderView', this.setupGroups.bind(this));

    this.dropdownButton.on('click', this.dropdownButtonClickEvent.bind(this));

  },

  dropdownButtonClickEvent: function(e) {
    e.preventDefault();
    var $this = $(e.target);

    this.dropdown.slideToggle(125, function() {
      if($(this).is(':visible')) {
        $this.text('Hide Display Preferences ▲');
        $this.toggleClass('expanded');
      } else {
        $this.text('Set Display Preferences ▼');
        $this.toggleClass('expanded');
      }
    });

  },

  setupGroups: function() {
    this.ci = $('[data-ci]');
    this.se = $('[data-se]');
    this.setRowHeight.call(this);
    this.disableCheckboxes.call(this);
  },

  disableCheckboxes: function() {
    var groups = this.groups;
    var checked_pops = false;
    var all_checked = true;
    if(pop_boxes.length > 0) {
      checked_pops = pop_boxes;
    }

    $.each(this.checkboxes, function(index) {
      var $this = $(this);

      if(!groups.filter("[data-group='" + $this.val() + "']").get().length) {
        $this.prop('disabled', 'disabled');
        $this.prop('checked', false);
        $this.parents('label').addClass('disabled');
      } else {
        $this.prop('disabled', false);
        // if the 'pop' param is set, only check those boxes
        if(checked_pops && checked_pops != '' && $.inArray(''+index, checked_pops) == -1){
          all_checked = false;
          $this.prop('checked', false);
          $('ul[data-group="' + $this.val() + '"]').hide();
          $('div.objective_footnote[data-popgroup-vocabulary="' + $this.val() + '"]').hide();
        } else {
          $this.prop('checked', true);
        }
        $this.parents('label').removeClass('disabled');
      }
    });

    if(!all_checked) {
      $('#show_all_pops').removeAttr('checked');
    }

    if(params['ci'] == 1) {
      $('#conf_interval').prop('checked', true);
      ci_visible = true;
    }

    if(params['se'] == 1) {
      $('#standard_error').prop('checked', true);
      se_visible = true;
    }

    $.each($('div.scrolling-data-table'), function() {
      var $this = $(this);
      // var height = $this.find('ul').eq(0).outerHeight() + $this.find('ul').eq(1).outerHeight();
      var height = 112;
      if (params['ci'] == 1) {
        height += 12;
      }
      if (params['se'] == 1) {
        height += 12;
      }
      $this.css('height', height);
      $this.data('closed', true);
      
      if($this.find('ul.row:not(:hidden)').length > 2) {
        $this.siblings('button.view-population-data').text('View Population Data ▼').show();
      } else {
       $this.siblings('button.view-population-data').hide();
      }
    });

  },

  setRowHeight: function() {
    this.groups = $('ul[data-group]');
    $.each(this.groups, function() {
      var $lis = $(this).find('li');

      $lis.css('height', 'auto');

      var heights = $lis.map(function() {
        return $(this).outerHeight();
      }).get();

      $lis.filter('.sticky').css('height', Math.max.apply(null, heights));

    });
  },

  refreshClickEvent: function(e) {
    e.preventDefault();
    var ci = $('[data-ci]');
    var se = $('[data-se]');

    if($('#conf_interval').prop('checked') === true) {
      ci_visible = true;
      ci.show();
      $('span.CI_footnote').show();
      $("#views-exposed-form-objective-faceted-search-panel-pane-1 input[name='ci']").val('1');
    } else {
      ci_visible = false;
      ci.hide();
      $('span.CI_footnote').hide();
      $("#views-exposed-form-objective-faceted-search-panel-pane-1 input[name='ci']").val('0');
    }

    if($('#standard_error').prop('checked') === true) {
      se_visible = true;
      se.show();
      $("#views-exposed-form-objective-faceted-search-panel-pane-1 input[name='se']").val('1');
    } else {
      se_visible = false;
      se.hide();
      $("#views-exposed-form-objective-faceted-search-panel-pane-1 input[name='se']").val('0');
    }

    pop_boxes = [];
    $.each(this.checkboxes, function(index) {
      var $this = $(this);
      var $thisVal = $this.val();


      if($this.prop('checked') === false) {
        $('ul[data-group="' + $thisVal + '"]').hide();
        $('div.objective_footnote[data-popgroup-vocabulary="' + $thisVal + '"]').hide();
      } else {
        pop_boxes.push(index);
        $('ul[data-group="' + $thisVal + '"]').show();
        $('div.objective_footnote[data-popgroup-vocabulary="' + $thisVal + '"]').show();
      }
    });

    if(pop_boxes.length == 0) {
      pop_boxes[0] = 'none';
    }

    $("#views-exposed-form-objective-faceted-search-panel-pane-1 input[name='pop']").val(pop_boxes.join('-'));

    $.each($('div.scrolling-data-table'), function() {
      var $this = $(this);
      var height = $this.find('ul').eq(0).outerHeight() + $this.find('ul').eq(1).outerHeight();
      $this.css('height', height);
      $this.data('closed', true);
      
      if($this.find('ul.row:not(:hidden)').length > 2) {
        $this.siblings('button.view-population-data').text('View Population Data ▼').show();
      } else {
       $this.siblings('button.view-population-data').hide();
      }
    });

    this.setRowHeight.call(this);
  }
};

/**
* This function rearranges the pager links.
* It's only necessary because theme_views_mini_pager is broken in Tao at the moment.
* If that issue gets resolved, use that instead of this jquery.
* See: https://www.drupal.org/node/1367208
*/
var pager_fix = function() {
  var left_pagers = $('#view-pager .pager-first, #view-pager .pager-previous');
  var pager_numbers = $('#view-pager .pager-list');
  if(left_pagers.length && pager_numbers.length) {
    left_pagers = left_pagers.detach();
    pager_numbers.before("<ul id='left_pagers' class='links pager pager-links'></ul>");
    $('#left_pagers').append(left_pagers);
  }
}

/**
* This function adds 'missing' objectives to the objectives filter on the left of the EBR search page.
* It is VERY bad.
* It should be removed if it isn't necessary.
*/
var objective_filter_rewrite = function(){
  // First, we determine which objectives are already being displayed.
  var real_links = {};
  $('#facetapi-facet-search-apiebr-index-block-field-objectives .leaf > label').each(function(){
    var objective_title = $(this).text().split(' ')[2];
    real_links[objective_title] = $(this).parent();
  });

  // Then, we loop over the query results we generated in panels-pane--facet-pane.tpl.php.
  var prev_link = false;
  $.each(Drupal.settings.objectives_sort, function(id, title){
    var addlinks = true;
    var class_name = id.replace(/\W+/g, '_');
    var complete_title = id + ' ' + Drupal.settings.objectives[id]['field_short_description_value'];
    var topic_id = Drupal.settings.objectives[id]['field_topic_area_target_id'];

    // don't add links if there are topic areas being filtered by and this objective isn't in one of those topic areas.
    if ($('#topic_expand input:checked').length && !$('#topic_expand #'+topic_id+':checked').length) {
      addlinks = false;
    }

    if (addlinks) {
      if (real_links[id] != undefined) {
        prev_link = real_links[id];
      } else {
        if (prev_link) {
          prev_link.after("<li class='leaf'>"+
          "<label class='element-invisible' for='fake-facetapi-link--" + class_name + "--checkbox'> Apply " + title + " filter </label>"+
          "<input type='checkbox' class='facetapi-checkbox' id='fake-facetapi-link--" + class_name + "--checkbox' disabled='disabled'>"+
          "<a href='' rel='nofollow' class='facetapi-zero-results facetapi-inactive facetapi-checkbox-processed disabled' id='fake-facetapi-link--" + class_name + "'>"+
          complete_title + " (0)<span class='element-invisible'> Apply " + title + " filter </span></a></li>");
          prev_link = $("#fake-facetapi-link--" + class_name).closest('.leaf');
        } else {
          $('#facetapi-facet-search-apiebr-index-block-field-objectives .leaf').first().before("<li class='leaf'>"+
          "<label class='element-invisible' for='fake-facetapi-link--" + class_name + "--checkbox'> Apply " + title + " filter </label>"+
          "<input type='checkbox' class='facetapi-checkbox' id='fake-facetapi-link--" + class_name + "--checkbox' disabled='disabled'>"+
          "<a href='' rel='nofollow' class='facetapi-zero-results facetapi-inactive facetapi-checkbox-processed disabled' id='fake-facetapi-link--" + class_name + "'>"+
          complete_title + " (0)<span class='element-invisible'> Apply " + title + " filter </span></a></li>");
          prev_link = $("#fake-facetapi-link--" + class_name).closest('.leaf');
        }
      }
    }
  });
}

/**
* And the same treatment for the Race & Ethnicity filter... as if it wasn't bad enough already...
*/
var race_filter_rewrite = function(){
  var real_links = {};
  $('#facetapi-facet-search-apiebr-index-block-field-ebr-race-and-ethnicity > li > label').each(function(){
    var term_title = $(this).text().split(' ');
    term_title = term_title.splice(2, term_title.length - 4).join(' ');
    real_links[term_title] = $(this).parent();
  });


  var prev_link = false;
  $.each(Drupal.settings.race_taxonomy, function(index, contents){
    var title = contents.name;
    var class_name = title.replace(/\W+/g, '_');

    if (real_links[title] != undefined) {
      prev_link = real_links[title];
    } else {
      if (prev_link) {
        prev_link.after("<li class='leaf'>"+
        "<label class='element-invisible' for='fake-facetapi-link--" + class_name + "--checkbox'> Apply " + title + " filter </label>"+
        "<input type='checkbox' class='facetapi-checkbox' id='fake-facetapi-link--" + class_name + "--checkbox' disabled='disabled'>"+
        "<a href='' rel='nofollow' class='facetapi-zero-results facetapi-inactive facetapi-checkbox-processed disabled' id='fake-facetapi-link--" + class_name + "'>"+
        title + " (0)<span class='element-invisible'> Apply " + title + " filter </span></a></li>");
        prev_link = $("#fake-facetapi-link--" + class_name).closest('.leaf');
      } else {
        $('#facetapi-facet-search-apiebr-index-block-field-ebr-race-and-ethnicity > li').first().before("<li class='leaf'>"+
        "<label class='element-invisible' for='fake-facetapi-link--" + class_name + "--checkbox'> Apply " + title + " filter </label>"+
        "<input type='checkbox' class='facetapi-checkbox' id='fake-facetapi-link--" + class_name + "--checkbox' disabled='disabled'>"+
        "<a href='' rel='nofollow' class='facetapi-zero-results facetapi-inactive facetapi-checkbox-processed disabled' id='fake-facetapi-link--" + class_name + "'>"+
        title + " (0)<span class='element-invisible'> Apply " + title + " filter </span></a></li>");
        prev_link = $("#fake-facetapi-link--" + class_name).closest('.leaf');
      }
    }
  });
}

var chart_link_additions = function(){
  $('#content').on('click', "a.chart-button", function(event){
    event.preventDefault();
    var chart_url = $(this).attr('href');
    if (ci_visible) {
      chart_url += '&ci=true';
    }
    if (se_visible) {
      chart_url += '&se=true';
    }

    var year_list = $(this).closest('div.nd_table').find('.nd_header_wrap .years-list');
    if(year_list.find('input:not(:checked)').length) {
      year_list.find('input.year-checkbox').each(function(i){
        if($(this).is(':checked')){
          chart_url += "&years["+i+"]="+$(this).val();
        }
      });
    }
    window.open(chart_url, '_blank');
  });
}

var rlog_icons = function() {
  $('.icon.term, .icon.rlog').hover(function(){
    $(this).children('.tool-tip').show();
  }, function() {
    $(this).children('.tool-tip').hide();
  });
}

var remember_display = function() {
  var add_checkbox_params = function(event) {
    event.preventDefault();
    var target = $(event.target);
    var target_url = target.attr('href');
    var target_url_params = {};
    if(target_url.split('?')[1] != undefined) {
      target_url_params = $.deparam(target_url.split('?')[1]);
    }
    target_url_params['pop'] = pop_boxes.join('-');
    if(ci_visible) {
      target_url_params['ci'] = 1;
    } else {
      target_url_params['ci'] = '';
    }
    if(se_visible) {
      target_url_params['se'] = 1;
    } else {
      target_url_params['se'] = '';
    }
    var new_target_url = $.param.querystring(target_url, target_url_params);
    window.location.href = new_target_url;
  }

  // step 1: the facet links on the left
  $('.panel-col-first').on('click', 'a.facetapi-checkbox-processed', add_checkbox_params);

  // make the facet checkboxes work too
  $('input.facetapi-checkbox').off();
  $('.panel-col-first').on('click', 'input.facetapi-checkbox', function(event){
    var target = $(event.target);
    target.siblings('a.facetapi-checkbox-processed').click();
  });

  $('#view-pager').on('click', 'a.active', add_checkbox_params);
}

var table_refresh = function(){
  $(document).on('event_clear', function(e) {
    var viewContainer = $('div' + e.container);
    viewContainer.empty();
    Drupal.theme.bb(e.objective, e.fips);
  });

  $('div.views-field-nid').on('click', 'div.state_dropdown', function(event){
    var target = $(event.target);
    var dropdown = target.parents('div.state_dropdown');
    dropdown.addClass('open');
    dropdown.find('.state_dropdown_inner').slideDown();
  });

  $('div.views-field-nid').on('mouseleave', 'div.state_dropdown', function(event){
    var target = $(event.target);
    var dropdown = target.parents('div.state_dropdown');
    dropdown.removeClass('open');
    dropdown.find('.state_dropdown_inner').slideUp();
  });
};

if (($('body').hasClass('objective-search') || $('body').hasClass('ebr-search')) && run_once) {
  objective_search_top();
  objective_search_side();
  footnote_logic();
  refreshDropdown.init();
  chart_link_additions();
  rlog_icons();
  pager_fix();
  remember_display();
  table_refresh();
  run_once = false;
}

if ($('body').hasClass('ebr-search') && also_run_once) {
  // hack-y way of getting the custom 'your search for __' text at the top of the view
  if ($('#searched_for').length) {
    var filter_value = $('input.facetapi-checkbox:checked').parent()
      .clone()    //clone the element
      .children() //select all the children
      .remove()   //remove all the children
      .end()  //again go back to selected element
      .text();
    $('#searched_for').html("for <span class='black'>" + filter_value + "</span>");
    $('#searched_for').show();
  }
  if($('#facetapi-facet-search-apiebr-index-block-field-objectives').length) {
    objective_filter_rewrite();
  }
  if($('#facetapi-facet-search-apiebr-index-block-field-ebr-race-and-ethnicity').length) {
    race_filter_rewrite();
  }
  also_run_once = false;
}


}}}(jQuery, Drupal, this, this.document));
